#!/bin/bash

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }

# Function to print usage information
show_usage() {
    echo -e "${YELLOW}Usage:${NC}"
    echo "  airlab launch <robot_name> [options]"
    echo
    echo -e "${YELLOW}Arguments:${NC}"
    echo "  <robot_name>              Name of the robot to launch(must be defined in robot.conf)."
    echo
    echo -e "${YELLOW}Options:${NC}"
    echo "  --yaml_file=<file_name>   Yaml Launch file. Defaults to LAUNCH_FILE_PATH which points to the launch file in the robot's workspace."
    echo "  You can change the default launch file path by setting the LAUNCH_FILE_PATH environment variable using airlab set_env command."
    echo "  --stop                    Stop the tmux session instead of starting it"
    echo "  --help                    Show this help message"
    echo
    echo -e "${YELLOW}Examples:${NC}"
    echo "  airlab launch local                      # Launch yaml file set by env var LAUNCH_FILE_PATH locally"
    echo "  airlab launch mt001                      # Launch yaml file set by env var LAUNCH_FILE_PATH on remote system mt001"
    echo "  airlab launch mt001 --stop               # Stop tmux session named by the env var LAUNCH_FILE_PATH on remote system mt001"
    echo "  airlab launch mt001 --yaml_file=mt002.yaml        # Launch mt002.yaml on remote system mt002"
    echo "  airlab launch mt001 --yaml_file=mt002.yaml --stop # Stop mt002.yaml tmux session on remote system mt002"
    echo "NOTE: Use 'local' as the robot name to launch locally."
    echo "NOTE: the yaml_file path should be relative to the robot's workspace."
}

parse_yaml() {
    local yaml_file=$1
    local key=$2
    local result
    
    # Check if file exists
    if [[ ! -f "$yaml_file" ]]; then
        log_error "YAML file not found: $yaml_file"
        return 1
    fi
    
    # Check if python3 and PyYAML are available
    if ! python3 -c "import yaml" 2>/dev/null; then
        log_error "Python YAML module not found. Please install: pip3 install PyYAML"
        return 1
    fi
    
    result=$(python3 -c '
import sys
import yaml

try:
    with open("'"$yaml_file"'", "r") as f:
        data = yaml.safe_load(f)
        value = data
        for key in "'"$key"'".split("."):
            if not isinstance(value, dict):
                print("")
                sys.exit(1)
            value = value.get(key, "")
        print(value)
except Exception as e:
    print("")
    sys.exit(1)
')
    
    if [[ -z "$result" ]]; then
        log_error "Failed to parse key '$key' from YAML file"
        return 1
    fi
    
    echo "$result"
}

# Function to check if required commands exist
check_dependencies() {
    local deps=("tmuxp" "ssh" "python3")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            log_error "Required dependency '$dep' is not installed."
            exit 1
        fi
    done
}

# Function to stop tmux session
stop_tmux_session() {
    local session_name=$1
    tmux kill-session -t "$session_name" 2>/dev/null || {
        log_error "No active tmux session named '$session_name'"
        return 1
    }
    log_info "Successfully stopped tmux session '$session_name'"
}

launch_remote(){
    local SYSTEM_NAME="$1"
    local stop="${2:-false}" # Default to 'false' if not provided
    local yaml_file="${3:-}"  # Default to an empty string if not provided

    source ~/.bashrc
    ROBOT_CONF="$AIRLAB_PATH/robot/robot.conf"
    
    if [[ ! -f "$ROBOT_CONF" ]]; then
        log_error "Robot configuration file not found at '$ROBOT_CONF'"
        exit 1
    fi

    # Load the target system's SSH address from robot.conf
    ROBOT_SSH_ADDRESS=$(grep "^$SYSTEM_NAME=" "$ROBOT_CONF" | cut -d= -f2)
    if [[ -z "$ROBOT_SSH_ADDRESS" ]]; then
        log_error "System '$SYSTEM_NAME' not found in $ROBOT_CONF"
        exit 1
    fi

    local robot_password
    log_info "Enter password for $ROBOT_SSH_ADDRESS:"
    read -s robot_password
    [[ -z "$robot_password" ]] && error_exit "Password cannot be empty"
    echo

    # Check SSH connection before attempting any operation
    if ! sshpass -p "$robot_password" ssh -q -o ConnectTimeout=15 -o StrictHostKeyChecking=no "$ROBOT_SSH_ADDRESS" exit; then
        log_error "Cannot connect to remote system '$ROBOT_SSH_ADDRESS'"
        exit 1
    fi
    log_info "SSH connection successful"

    ROBOT_INFO_PATH="$AIRLAB_PATH/robot/robot_info.yaml"
    if [[ ! -f "$ROBOT_INFO_PATH" ]]; then
        log_error "Robot info file not found at '$ROBOT_INFO_PATH'"
        exit 1
    fi

    local LAUNCH_NAME

    if [[ -z "$yaml_file" ]]; then
        # Parse the workspace path and handle errors
        yaml_file=$(parse_yaml "$ROBOT_INFO_PATH" "$SYSTEM_NAME.LAUNCH_FILE_PATH") || {
            log_error "Failed to get launch fileA path from robot_info.yaml"
            exit 1
        }    
        if [[ -z "$yaml_file" ]]; then
            log_error "Launch File path is empty in robot_info.yaml"
            exit 1
        fi
        LAUNCH_NAME="$(basename "${yaml_file%.*}")"
    else
        # Parse the workspace path and handle errors
        ws_path=$(parse_yaml "$ROBOT_INFO_PATH" "$SYSTEM_NAME.ws_path") || {
            log_error "Failed to get workspace path from robot_info.yaml"
            exit 1
        }    
        if [[ -z "$ws_path" ]]; then
            log_error "Workspace path is empty in robot_info.yaml"
            exit 1
        fi
        yaml_file="$ws_path/$yaml_file"
        LAUNCH_NAME="$(basename "${yaml_file%.*}")"
    fi

    if [[ "$stop" == true ]]; then
        log_info "Stopping tmux session '$LAUNCH_NAME' on remote system $SYSTEM_NAME..."
        if ! sshpass -p "$robot_password" ssh -t "$ROBOT_SSH_ADDRESS" "tmux kill-session -t $LAUNCH_NAME 2>/dev/null || (echo 'No active tmux session named $LAUNCH_NAME' >&2 && exit 1)"; then
            log_error "Failed to stop remote tmux session"
            exit 1
        fi
        log_info "Successfully stopped remote tmux session"
        exit 0
    fi

    log_info "Launching $LAUNCH_NAME.yaml on remote system $SYSTEM_NAME"
    
    # Launch on remote system with error handling
    if ! sshpass -p "$robot_password" ssh -t "$ROBOT_SSH_ADDRESS" "tmuxp load -s "$LAUNCH_NAME" $yaml_file"; then
        log_error "Failed to launch on remote system"
        exit 1
    fi
}

launch_local() {
    local stop="${1:-false}" # Default to 'false' if not provided
    local yaml_file="${2:-}"  # Default to an empty string if not provided


    source ~/.bashrc
    local LAUNCH_NAME

    # If no YAML file is provided, use the default launch file path
    if [[ -z "$yaml_file" ]]; then
        yaml_file="$LAUNCH_FILE_PATH"
        LAUNCH_NAME="$(basename "${yaml_file%.*}")"
    else
        yaml_file="$AIRLAB_PATH/$yaml_file"
        LAUNCH_NAME="$(basename "${yaml_file%.*}")"
    fi

    # Stop the tmux session if the flag is set
    if [[ "$stop" == true ]]; then
        log_info "Stopping local tmux session '$LAUNCH_NAME'..."
        if ! stop_tmux_session "$LAUNCH_NAME"; then
            exit 1
        fi
        exit 0
    fi

    # Check if the YAML file exists locally before launching
    if [[ ! -f "$yaml_file" ]]; then
        log_error "Launch file '$yaml_file' not found."
        exit 1
    fi

    log_info "Launching '$LAUNCH_NAME.yaml' locally..."
    if ! tmuxp load -s "$LAUNCH_NAME" "$yaml_file"; then
        log_error "Failed to launch locally"
        exit 1
    fi
}

main() {
    # Check dependencies
    check_dependencies
    [[ $# -lt 1 ]] && { show_usage; error_exit "No command provided"; }

    local system="$1"
    shift

    local yaml_file=""
    local stop=false
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --yaml_file=*)
                yaml_file="${1#--yaml_file=}"
                ;;
            --stop)
                stop=true
                ;;
            --help)
                show_usage
                exit 0
                ;;
            *)
                log_error "Invalid option: $1"
                show_usage
                exit 1
                ;;
        esac
        shift
    done


    case "$system" in
        local)
            # Call launch_local with yaml_file only if it's not empty
            if [[ -n "$yaml_file" ]]; then
                launch_local "$stop" "$yaml_file"
            else
                launch_local "$stop"
            fi
            ;;
        -h|--help)
            show_usage
            ;;
        *)
            # Call launch_remote with yaml_file only if it's not empty
            if [[ -n "$yaml_file" ]]; then
                launch_remote "$system" "$stop" "$yaml_file"
            else
                launch_remote "$system" "$stop"
            fi
            ;;
    esac
}


# Run main function
main "$@"