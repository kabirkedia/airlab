#!/bin/bash

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }

show_usage() {
    cat << EOF
Usage: airlab set_env [ROBOT_NAME] [ENV_VARIABLE]

Set environment variables for robots or local environment.

Arguments:
    ROBOT_NAME    Name of robot (use 'local' for local environment)
    ENV_VARIABLE  Environment variable to set along with the value

Options:
    -h, --help   Show this help message

Examples:
    airlab set_env local  MY_VAR="hello"    # Set local environment variable
    airlab set_env robot1 MY_VAR="hello"   # Set remote robot environment
EOF
}

parse_yaml() {
    local yaml_file=$1
    local key=$2
    local result
    
    # Check if file exists
    if [[ ! -f "$yaml_file" ]]; then
        log_error "YAML file not found: $yaml_file"
        return 1
    fi
    
    # Check if python3 and PyYAML are available
    if ! python3 -c "import yaml" 2>/dev/null; then
        log_error "Python YAML module not found. Please install: pip3 install PyYAML"
        return 1
    fi
    
    result=$(python3 -c '
import sys
import yaml

try:
    with open("'"$yaml_file"'", "r") as f:
        data = yaml.safe_load(f)
        value = data
        for key in "'"$key"'".split("."):
            if not isinstance(value, dict):
                print("")
                sys.exit(1)
            value = value.get(key, "")
        print(value)
except Exception as e:
    print("")
    sys.exit(1)
')
    
    if [[ -z "$result" ]]; then
        log_error "Failed to parse key '$key' from YAML file"
        return 1
    fi
    
    echo "$result"
}

update_robot_info() {
    local robot_info_file="$1"
    local robot_name="$2"
    local field="$3"
    local value="$4"
    local no_overwrite="$5"

    ROBOT_INFO_FILE="$robot_info_file/robot/robot_info.yaml"
    
    # Create YAML file if it doesn't exist
    if [ ! -f "$ROBOT_INFO_FILE" ]; then
        echo "robots:" > "$ROBOT_INFO_FILE"
    fi
    
    # Get current timestamp
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Check if robot already exists in YAML
    if grep -q "^  $robot_name:" "$ROBOT_INFO_FILE"; then
        # Check if field exists for this robot
        if grep -q "^    $field:" <(sed -n "/^  $robot_name:/,/^  [^[:space:]]/p" "$ROBOT_INFO_FILE"); then
            # Update existing field
            if [ "$no_overwrite" = "--no-overwrite" ]; then
                log_warn "Skipped updating $robot_name $field as --no-overwrite is set"
            else
                # Update existing field
                sed -i "/^  $robot_name:/,/^  [^[:space:]]/ {
                    s|^    $field:.*|    $field: \"$value\"|
                }" "$ROBOT_INFO_FILE"
            fi
        else
            # Add new field to existing robot
            sed -i "/^  $robot_name:/a\    $field: \"$value\"" "$ROBOT_INFO_FILE"
        fi
        # Always update last_updated timestamp
        sed -i "/^  $robot_name:/,/^  [^[:space:]]/ {
            s|^    last_updated:.*|    last_updated: \"$timestamp\"|
        }" "$ROBOT_INFO_FILE"
    else
        # Add new robot entry with the field
        cat >> "$ROBOT_INFO_FILE" << EOF
  $robot_name:
    $field: "$value"
    last_updated: "$timestamp"
EOF
    fi
    log_info "Updated robot $robot_name $field in $ROBOT_INFO_FILE"
}

set_env_local() {
    set -e  # Exit immediately if a command exits with a non-zero status

    source ~/.bashrc
    local input="$1"
    local ENV_FILE="$AIRLAB_PATH/airlab.env"
    log_info "Found Value $ENV_FILE. Processing"

    # Check if input is in the format VAR="value"
    if [[ ! "$input" =~ ^[A-Za-z_][A-Za-z0-9_]*=.*$ ]]; then
        log_error "Invalid format. Use VAR=value"
        exit 1
    fi

    # Parse the variable name and value
    local ENV_VARIABLE="${input%%=*}"
    local ENV_VALUE="${input#*=}"
    ENV_VALUE="${ENV_VALUE%\"}"  # Remove trailing quote
    ENV_VALUE="${ENV_VALUE#\"}"  # Remove leading quote

    # Check if the environment file exists
    if [ ! -f "$ENV_FILE" ]; then
        log_info "Environment file $ENV_FILE not found. Creating it."
        touch "$ENV_FILE"
    fi

    # Check if the variable exists in the environment file
    if grep -q "^$ENV_VARIABLE=" "$ENV_FILE"; then
        sed -i "s|^$ENV_VARIABLE=.*|$ENV_VARIABLE=$ENV_VALUE|" "$ENV_FILE"
        log_info "Updated $ENV_VARIABLE in $ENV_FILE"
    else
        echo "$ENV_VARIABLE=$ENV_VALUE" >> "$ENV_FILE"
        log_info "Added $ENV_VARIABLE to $ENV_FILE"
    fi
}

set_env_remote() {
    local SYSTEM_NAME="$1"
    local ENV_VARIABLE="$2"

    source ~/.bashrc

    ROBOT_CONF="$AIRLAB_PATH/robot/robot.conf"
    if [[ ! -f "$ROBOT_CONF" ]]; then
        log_error "Robot configuration file not found at '$ROBOT_CONF'"
        exit 1
    fi

    # Load the target system's SSH address from robot.conf
    ROBOT_SSH_ADDRESS=$(grep "^$SYSTEM_NAME=" "$ROBOT_CONF" | cut -d= -f2)
    if [[ -z "$ROBOT_SSH_ADDRESS" ]]; then
        log_error "System '$SYSTEM_NAME' not found in $ROBOT_CONF"
        exit 1
    fi

    local robot_password
    log_info "Enter password for $ROBOT_SSH_ADDRESS:"
    read -s robot_password
    [[ -z "$robot_password" ]] && error_exit "Password cannot be empty"
    echo

    # Check SSH connection before attempting any operation
    if ! sshpass -p "$robot_password" ssh -q -o ConnectTimeout=15 -o StrictHostKeyChecking=no "$ROBOT_SSH_ADDRESS" exit; then
        log_error "Cannot connect to remote system '$ROBOT_SSH_ADDRESS'"
        exit 1
    fi
    log_info "SSH connection successful"

    ROBOT_INFO_PATH="$AIRLAB_PATH/robot/robot_info.yaml"
    if [[ ! -f "$ROBOT_INFO_PATH" ]]; then
        log_error "Robot info file not found at '$ROBOT_INFO_PATH'"
        exit 1
    fi

    # Parse the workspace path and handle errors
    LAUNCH_DIR=$(parse_yaml "$ROBOT_INFO_PATH" "$SYSTEM_NAME.ws_path") || {
        log_error "Failed to get workspace path from robot_info.yaml"
        exit 1
    }

    # Operate this script on the remote system
    if sshpass -p "$robot_password" ssh -o StrictHostKeyChecking=no "$ROBOT_SSH_ADDRESS" "dpkg -l | grep -q '^ii.*airlab'" ; then
        if ! sshpass -p "$robot_password" ssh -t "$ROBOT_SSH_ADDRESS" "source $LAUNCH_DIR/airlab.env && airlab set_env local "$ENV_VARIABLE""; then
            log_error "Failed to change value on remote system"
            exit 1
        fi
    else
        log_error "Airlab command is not installed"
    fi

    # Parse the variable name and value
    local ENV_VARIABLE="${input%%=*}"
    local ENV_VALUE="${input#*=}"
    ENV_VALUE="${ENV_VALUE%\"}"  # Remove trailing quote
    ENV_VALUE="${ENV_VALUE#\"}"  # Remove leading quote
    update_robot_info "$ROBOT_SSH_ADDRESS" "$SYSTEM_NAME" "$ENV_VARIABLE" "$ENV_VALUE" 
}

main() {
    # Parse command line arguments
    if [[ $# -eq 0 || "$1" == "--help" ]]; then
        show_usage
        exit 0
    fi

    # Get the robot name
    local ROBOT_NAME="$1"
    shift  # Remove the first argument (ROBOT_NAME)

    if [[ $# -eq 0 || "$1" == "--help" ]]; then
        show_usage
        exit 0
    fi

    local ENV_VARIABLE="$1"
    shift

    case "$ROBOT_NAME" in
        local)
            set_env_local "$ENV_VARIABLE"
            ;;
        -h|--help)
            show_usage
            ;;
        *)
            set_env_remote "$ROBOT_NAME" "$ENV_VARIABLE"
            ;;
    esac

}

# Run main function
main "$@"