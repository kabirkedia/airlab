#!/bin/bash

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }

# Function to print usage information
show_usage() {
    echo -e "${YELLOW}Usage:${NC}"
    echo "  airlab ssh <robot_name> [options]"
    echo
    echo -e "${YELLOW}Arguments:${NC}"
    echo "  <robot_name>              Name of the robot to ssh into (must be defined in robot.conf)"
    echo
    echo -e "${YELLOW}Options:${NC}"
    echo "  --help                    Show this help message"
    echo
    echo -e "${YELLOW}Examples:${NC}"
    echo "  airlab ssh mt001                          # Sync files to mt001"
}




# Function to check if required commands exist
check_dependencies() {
    local deps=("ssh" "sshpass" )
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            log_error "Required dependency '$dep' is not installed."
            exit 1
        fi
    done
}

parse_yaml() {
    local yaml_file=$1
    local key=$2
    local result
    
    # Check if file exists
    if [[ ! -f "$yaml_file" ]]; then
        log_error "YAML file not found: $yaml_file"
        return 1
    fi
    
    # Check if python3 and PyYAML are available
    if ! python3 -c "import yaml" 2>/dev/null; then
        log_error "Python YAML module not found. Please install: pip3 install PyYAML"
        return 1
    fi
    
    result=$(python3 -c '
import sys
import yaml

try:
    with open("'"$yaml_file"'", "r") as f:
        data = yaml.safe_load(f)
        value = data
        for key in "'"$key"'".split("."):
            if not isinstance(value, dict):
                print("")
                sys.exit(1)
            value = value.get(key, "")
        print(value)
except Exception as e:
    print("")
    sys.exit(1)
')
    
    if [[ -z "$result" ]]; then
        log_error "Failed to parse key '$key' from YAML file"
        return 1
    fi
    
    echo "$result"
}

main() {
    # Check dependencies first
    check_dependencies

    # Parse command line arguments
    if [[ $# -eq 0 || "$1" == "--help" ]]; then
        show_usage
        exit 0
    fi

    # Get the robot name
    ROBOT_NAME="$1"
    

    # Check for robot configuration
    ROBOT_CONF="$AIRLAB_PATH/robot/robot.conf"
    if [[ ! -f "$ROBOT_CONF" ]]; then
        log_error "Robot configuration file not found at '$ROBOT_CONF'"
        exit 1
    fi

    # Load the robot's SSH address from robot.conf
    ROBOT_SSH_ADDRESS=$(grep "^$ROBOT_NAME=" "$ROBOT_CONF" | cut -d= -f2)
    if [[ -z "$ROBOT_SSH_ADDRESS" ]]; then
        log_error "Robot '$ROBOT_NAME' not found in $ROBOT_CONF"
        exit 1
    fi

    # Get robot workspace path from robot_info.yaml
    ROBOT_INFO_PATH="$AIRLAB_PATH/robot/robot_info.yaml"
    if [[ ! -f "$ROBOT_INFO_PATH" ]]; then
        log_error "Robot info file not found at '$ROBOT_INFO_PATH'"
        exit 1
    fi

    REMOTE_WS_PATH=$(parse_yaml "$ROBOT_INFO_PATH" "$ROBOT_NAME.ws_path") || {
        log_error "Failed to get workspace path from robot_info.yaml"
        exit 1
    }

    if [[ -z "$REMOTE_WS_PATH" ]]; then
        log_error "Workspace path is empty in robot_info.yaml"
        exit 1
    fi

    # Get password for SSH connection
    local robot_password
    log_info "Enter password for $ROBOT_SSH_ADDRESS:"
    read -s robot_password
    [[ -z "$robot_password" ]] && log_error "Password cannot be empty" && exit 1
    echo

    # Test SSH connection
    if ! sshpass -p "$robot_password" ssh -o ConnectTimeout=15 -o StrictHostKeyChecking=no "$ROBOT_SSH_ADDRESS" exit; then
        log_error "Cannot connect to remote system '$ROBOT_SSH_ADDRESS'"
        exit 1
    fi
    log_info "SSH connection successful"

    if ! sshpass -p "$robot_password" ssh -t "$ROBOT_SSH_ADDRESS" "bash"; then
        log_error "Failed to launch on remote system"
        exit 1
    fi
}

# Run main function
main "$@"