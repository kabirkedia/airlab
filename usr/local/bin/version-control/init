#!/bin/bash

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }

# Function to print usage information
show_usage() {
    cat << EOF
Usage: airlab vcs init [OPTIONS]

Clone and set up repositories based on YAML configuration files. The YAML files live in version-control.

Options:
  --repo_file=FILE    Specify the YAML file containing repository information (default: repos.yaml).
  --path=DIR          Specify the directory to clone repositories into. 
                      If not specified, the directory from the YAML file is used.
  --all               Apply the operation to all YAML files in the version-control directory.
  --help              Display this help message and exit.

Dependencies:
  - git
  - python3 with vcstool module
  - python3 with PyYAML module

Example:
  airlab vcs init --repo_file=custom_repos.yaml --path=custom/path/

Description:
  This script clones and sets up repositories defined in YAML files using vcstool.
  It checks for required dependencies, creates the specified directory, copies the
  YAML file, and uses vcstool to clone and initialize the repositories.

Note: This script uses the 'vcs' command to interact with the repository.
EOF
}

check_dependencies() {
    local deps=("git")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            log_error "Required dependency '$dep' is not installed."
            exit 1
        fi
    done

    # Check if python3 and PyYAML are available
    if ! python3 -c "import yaml" 2>/dev/null; then
        log_error "Python YAML module not found. Please install: pip3 install PyYAML"
        exit 1
    fi
}

extract_yaml_dir() {
    local yaml_file=$1

    # Use Python to extract the "dir" field from the YAML file
    python3 - <<EOF
import yaml
import sys

with open("$yaml_file", 'r') as file:
    data = yaml.safe_load(file)
    print(data.get("dir", ""))
EOF
}

process_repository() {
    local repo_dir=$1
    local yaml_file=$2

    log_info "Processing repository with YAML file: $yaml_file"
    mkdir -p "$repo_dir"

    # Copy the YAML file to the target directory
    cp "$yaml_file" "$repo_dir"

    # Initialize the workspace
    vcs import "$repo_dir" < "$repo_dir/$(basename "$yaml_file")"
    cd "$repo_dir"
    vcs custom --git --args submodule update --init --recursive

    # Clean up the YAML file in the target directory
    rm -f "$repo_dir/$(basename "$yaml_file")"
}

process_all_repositories() {
    local yaml_dir=$1
    local target_dir=$2

    for yaml_file in "$yaml_dir"/*.yaml; do
        [[ -e "$yaml_file" ]] || { log_warn "No YAML files found in $yaml_dir"; continue; }

        # Extract directory from YAML file or use provided path
        local yaml_dir_path
        yaml_dir_path=$(extract_yaml_dir "$yaml_file")
        local final_dir="${yaml_dir_path:-$target_dir}"

        process_repository "$AIRLAB_PATH/$final_dir" "$yaml_file"
    done
}

main() {
    # Check dependencies first
    check_dependencies

    REPO_NAME=repos.yaml
    REPO_DIR=""
    ALL=false

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --repo_file=*)
                REPO_NAME="${1#--repo_file=}"
                ;;
            --path=*)
                REPO_DIR="${1#--path=}"
                ;;
            --all)
                ALL=true
                ;;
            --help)
                show_usage
                exit 0
                ;;
            *)
                log_error "Invalid option: $1"
                show_usage
                exit 1
                ;;
        esac
        shift
    done

    local yaml_dir="$AIRLAB_PATH/version_control"
    if [[ -z "$REPO_DIR" ]]; then
        log_info "Using 'dir' from YAML files as the target directory."
    else
        log_info "Overriding YAML 'dir' with user-specified path: $REPO_DIR"
    fi

    if [[ "$ALL" == true ]]; then
        log_info "Processing all repositories in YAML directory: $yaml_dir"
        process_all_repositories "$yaml_dir" "$REPO_DIR"
    else
        local yaml_file="$yaml_dir/$REPO_NAME"
        [[ -e "$yaml_file" ]] || { log_error "Specified YAML file not found: $yaml_file"; exit 1; }

        # Extract directory from YAML file or use provided path
        local yaml_dir_path
        yaml_dir_path=$(extract_yaml_dir "$yaml_file")
        local final_dir="${REPO_DIR:-$yaml_dir_path}"

        process_repository "$AIRLAB_PATH/$final_dir" "$yaml_file"
    fi
}

# Run main function
main "$@"
