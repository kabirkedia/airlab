#!/bin/bash

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }

# Function to print usage information
show_usage() {
    cat << EOF
Usage: airlab vcstool init [OPTIONS]

Clone and set up repositories based on a YAML configuration file. The yaml file lives in version-control

Options:
  --repo_file=FILE    Specify the YAML file containing repository information (default: repos.yaml)
  --path=DIR          Specify the directory to clone repositories into (default: ws/src/). 
                      The path is not absolute. It should be relative to you workspace path(or $AIRLAB_PATH in env)
  --help              Display this help message and exit

Dependencies:
  - git
  - python3 with vcstool module

Example:
  airlab vcstool init --repo_file=custom_repos.yaml --path=custom/path/

Description:
  This script clones and sets up repositories defined in a YAML file using vcstool.
  It checks for required dependencies, creates the specified directory, copies the
  YAML file, and uses vcstool to clone and initialize the repositories.

Note: This script uses the 'vcs' command to interact with the repository.
EOF
}


check_dependencies() {
    local deps=("git")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            log_error "Required dependency '$dep' is not installed."
            exit 1
        fi
    done

    # Check if python3 and vcstool are available
    if ! python3 -c "import vcstool" 2>/dev/null; then
        log_error "Python YAML module not found. Please install: pip3 install PyYAML"
        return 1
    fi
}

main() {
    # Check dependencies first
    check_dependencies

    REPO_NAME=repos.yaml
    REPO_DIR=ws/src

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --repo_file=*)
                REPO_NAME="${1#--repo_file=}"
                ;;
            --path=*)
                REPO_DIR="${1#--path=}"
                ;;
            --help=*)
                show_usage
                exit 0
                ;;
            *)
                log_error "Invalid option: $1"
                show_usage
                exit 1
                ;;
        esac
        shift
    done

    REPO_DIR=$REPO_DIR/${REPO_NAME%%.*}

    # Create the src directory.
    mkdir -p $AIRLAB_PATH/$REPO_DIR

    # Copy the dtc_robot_repos.yaml file to the src directory.
    cp $AIRLAB_PATH/version_control/$REPO_NAME $AIRLAB_PATH/$REPO_DIR

    # Initialize the workspace.
    vcs import $AIRLAB_PATH/$REPO_DIR < $AIRLAB_PATH/version_control/$REPO_NAME
    cd $AIRLAB_PATH/$REPO_DIR
    vcs custom --git --args submodule update --init --recursive
    rm -f $AIRLAB_PATH/$REPO_DIR/$REPO_NAME

    # Define the output file path
    CONFIG_FILE="/tmp/repo_config.txt"

    # Ensure the config file exists (create if missing)
    touch "$CONFIG_FILE"

    # Extract the dynamic variable name
    DYNAMIC_VAR="${REPO_NAME%%.*}"

    # Remove existing entries for the variable (if any)
    sed -i "/^${DYNAMIC_VAR}=/d" "$CONFIG_FILE"

    # Append the new REPO_NAME and REPO_DIR to the configuration file
    {
        echo "${DYNAMIC_VAR}=${AIRLAB_PATH}/${REPO_DIR}"
    } >> "$CONFIG_FILE"

    # Provide feedback to the user
    log_info "Repository configuration updated in $CONFIG_FILE"
}

# Run main function
main "$@"