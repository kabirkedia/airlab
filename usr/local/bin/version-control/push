#!/bin/bash

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }

# Function to print usage information
show_usage() {
    cat << EOF
Usage: airlab vcstool push [OPTIONS]

Push changes from repositories specified in repos.yaml file. The yaml file lives in $AIRLAB_PATH/version-control

Options:
  --repo_file=FILE    Specify the repository configuration file (default: repos.yaml). 
                      It will only push from repos specified in that yaml file
  --no-rebase         Perform a regular pull without rebasing
  --help              Display this help message and exit

Examples:
  airlab vcstool pull
  airlab vcstool pull --repo_file=custom_repos.yaml
  airlab vcstool pull --no-rebase

Note: This script uses the 'vcs' command to interact with the repository.
EOF
}

main() {

    REPO_NAME=repos.yaml
    REBASE=true

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --repo_file=*)
                REPO_NAME="${1#--repo_file=}"
                ;;
            --help)
                show_usage
                exit 0
                ;;
            *)
                log_error "Invalid option: $1"
                show_usage
                exit 1
                ;;
        esac
        shift
    done

    source /tmp/repo_config.txt

    # Extract the dynamic variable name
    DYNAMIC_VAR="${REPO_NAME%%.*}"

    if eval "[[ -n \${$DYNAMIC_VAR+x} ]]"; then
        DIR_VALUE=$(eval "echo \$$DYNAMIC_VAR")
        log_info "Found path at $DIR_VALUE"
        vcs push $DIR_VALUE
    else
        log_warn "Could not find path for $REPO_NAME. Defaulting to ."
        vcs push 
    fi
}

# Run main function
main "$@"