#!/bin/bash

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }

# Function to print usage information
show_usage() {
    echo -e "${YELLOW}Usage:${NC}"
    echo "  airlab launch <yaml_file> [options]"
    echo
    echo -e "${YELLOW}Arguments:${NC}"
    echo "  <robot_name>              Name of the robot/launch file (without .yaml extension)"
    echo
    echo -e "${YELLOW}Options:${NC}"
    echo "  --system=<target_system>  Launch on a remote system defined in robot.conf"
    echo "  --stop                    Stop the tmux session instead of starting it"
    echo "  --help                    Show this help message"
    echo
    echo -e "${YELLOW}Examples:${NC}"
    echo "  airlab launch mt001                       # Launch mt001.yaml locally"
    echo "  airlab launch mt001 --stop               # Stop local mt001 tmux session"
    echo "  airlab launch mt001 --system=mt002       # Launch mt001.yaml on mt002"
    echo "  airlab launch mt001 --system=mt002 --stop # Stop mt001 tmux session on mt002"
}


parse_yaml() {
    local yaml_file=$1
    local key=$2
    local result
    
    # Check if file exists
    if [[ ! -f "$yaml_file" ]]; then
        log_error "YAML file not found: $yaml_file"
        return 1
    fi
    
    # Check if python3 and PyYAML are available
    if ! python3 -c "import yaml" 2>/dev/null; then
        log_error "Python YAML module not found. Please install: pip3 install PyYAML"
        return 1
    fi
    
    result=$(python3 -c '
import sys
import yaml

try:
    with open("'"$yaml_file"'", "r") as f:
        data = yaml.safe_load(f)
        value = data
        for key in "'"$key"'".split("."):
            if not isinstance(value, dict):
                print("")
                sys.exit(1)
            value = value.get(key, "")
        print(value)
except Exception as e:
    print("")
    sys.exit(1)
')
    
    if [[ -z "$result" ]]; then
        log_error "Failed to parse key '$key' from YAML file"
        return 1
    fi
    
    echo "$result"
}

# Function to check if required commands exist
check_dependencies() {
    local deps=("tmuxp" "ssh" "python3")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            log_error "Required dependency '$dep' is not installed."
            exit 1
        fi
    done
}

# Function to stop tmux session
stop_tmux_session() {
    local session_name=$1
    tmux kill-session -t "$session_name" 2>/dev/null || {
        log_error "No active tmux session named '$session_name'"
        return 1
    }
    log_info "Successfully stopped tmux session '$session_name'"
}

main() {
    # Check dependencies first
    check_dependencies

    # Parse command line arguments
    if [[ $# -eq 0 || "$1" == "--help" ]]; then
        show_usage
        exit 0
    fi

    # Get the robot name (which determines the launch file name)
    LAUNCH_NAME="$1"
    YAML_FILE="$AIRLAB_PATH/launch/$LAUNCH_NAME.yaml"

    # Parse flags
    SYSTEM_NAME=""
    STOP_FLAG=false
    shift  # Remove the first argument (LAUNCH_NAME)
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --system=*)
                SYSTEM_NAME="${1#--system=}"
                ;;
            --stop)
                STOP_FLAG=true
                ;;
            *)
                log_error "Invalid option: $1"
                show_usage
                exit 1
                ;;
        esac
        shift
    done

    # Handle remote system operations
    if [[ -n "$SYSTEM_NAME" ]]; then
        ROBOT_CONF="$AIRLAB_PATH/robot/robot.conf"
        
        if [[ ! -f "$ROBOT_CONF" ]]; then
            log_error "Robot configuration file not found at '$ROBOT_CONF'"
            exit 1
        fi

        # Load the target system's SSH address from robot.conf
        ROBOT_SSH_ADDRESS=$(grep "^$SYSTEM_NAME=" "$ROBOT_CONF" | cut -d= -f2)
        if [[ -z "$ROBOT_SSH_ADDRESS" ]]; then
            log_error "System '$SYSTEM_NAME' not found in $ROBOT_CONF"
            exit 1
        fi

        local robot_password
        log_info "Enter password for $ROBOT_SSH_ADDRESS:"
        read -s robot_password
        [[ -z "$robot_password" ]] && error_exit "Password cannot be empty"
        echo

        # Check SSH connection before attempting any operation
        if ! sshpass -p "$robot_password" ssh -q -o ConnectTimeout=15 "$ROBOT_SSH_ADDRESS" exit; then
            log_error "Cannot connect to remote system '$ROBOT_SSH_ADDRESS'"
            exit 1
        fi
        log_info "SSH connection successful"

        if [[ "$STOP_FLAG" == true ]]; then
            log_info "Stopping tmux session '$LAUNCH_NAME' on remote system $SYSTEM_NAME..."
            if ! sshpass -p "$robot_password" ssh -t "$ROBOT_SSH_ADDRESS" "tmux kill-session -t $LAUNCH_NAME 2>/dev/null || (echo 'No active tmux session named $LAUNCH_NAME' >&2 && exit 1)"; then
                log_error "Failed to stop remote tmux session"
                exit 1
            fi
            log_info "Successfully stopped remote tmux session"
            exit 0
        fi

        log_info "Launching $LAUNCH_NAME on remote system $SYSTEM_NAME"

        ROBOT_INFO_PATH="$AIRLAB_PATH/robot/robot_info.yaml"
        if [[ ! -f "$ROBOT_INFO_PATH" ]]; then
            log_error "Robot info file not found at '$ROBOT_INFO_PATH'"
            exit 1
        fi

        # Parse the workspace path and handle errors
        LAUNCH_DIR=$(parse_yaml "$ROBOT_INFO_PATH" "$SYSTEM_NAME.ws_path") || {
            log_error "Failed to get workspace path from robot_info.yaml"
            exit 1
        }
        
        if [[ -z "$LAUNCH_DIR" ]]; then
            log_error "Workspace path is empty in robot_info.yaml"
            exit 1
        fi
        
        log_info "Loading launch file at $LAUNCH_DIR/launch/$LAUNCH_NAME.yaml"

        # Launch on remote system with error handling
        if ! sshpass -p "$robot_password" ssh -t "$ROBOT_SSH_ADDRESS" "tmuxp load -s "$LAUNCH_NAME" $LAUNCH_DIR/launch/$LAUNCH_NAME.yaml"; then
            log_error "Failed to launch on remote system"
            exit 1
        fi
    else
        # Local operations
        if [[ "$STOP_FLAG" == true ]]; then
            log_info "Stopping local tmux session '$LAUNCH_NAME'..."
            if ! stop_tmux_session "$LAUNCH_NAME"; then
                exit 1
            fi
            exit 0
        fi

        # Check if the YAML file exists locally before launching
        if [[ ! -f "$YAML_FILE" ]]; then
            log_error "Launch file '$YAML_FILE' not found."
            exit 1
        fi

        log_info "Launching '$LAUNCH_NAME.yaml' locally..."
        if ! tmuxp load -s "$LAUNCH_NAME" "$YAML_FILE"; then
            log_error "Failed to launch locally"
            exit 1
        fi
    fi
}

# Run main function
main "$@"