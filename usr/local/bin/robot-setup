#!/bin/bash

# Constants

USER_HOME=$(getent passwd $SUDO_USER | cut -d: -f6)
readonly ENV_FILE="/etc/airlab/airlab.env"
readonly DEFAULT_AIRLAB_PATH="$USER_HOME/airlab_ws"

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }

# Function to display usage
show_usage() {
    echo -e "${YELLOW}Usage:${NC}"
    echo "  airlab setup Command [options]"
    echo
    echo -e "${YELLOW}Commands:${NC}"
    echo "  local                   Setup local environment"
    echo "  <system_name>           Setup remote robot environment"
    echo
    echo -e "${YELLOW}Options:${NC}"
    echo "  --path=<path>           Custom installation path (default: $DEFAULT_AIRLAB_PATH)"
    echo "  --force                 Force overwrite without prompting (use with caution)"
    echo
    echo -e "${YELLOW}Examples:${NC}"
    echo "  airlab setup local --path=/custom/path"
    echo "  airlab setup robot1 --path=~/custom/path --force"
}


# Function to handle errors
error_exit() {
    log_error "$1"
    exit 1
}

# Function to parse command line arguments
parse_args() {
    local args=("$@")
    local path="$DEFAULT_AIRLAB_PATH"
    local force=false

    for arg in "${args[@]}"; do
        case "$arg" in
            --path=*)
                path="${arg#--path=}"
                ;;
            --force)
                force=true
                ;;
            *)
                if [[ "$arg" != "local" && "$arg" != -* ]]; then
                    show_usage
                    error_exit "Invalid argument: $arg"
                fi
                ;;
        esac
    done

    echo "$path $force"
}

# Environment management functions
load_env() {
    if [ -f "$ENV_FILE" ]; then
        source "$ENV_FILE"
    else
        AIRLAB_PATH="$DEFAULT_AIRLAB_PATH"
    fi
}

save_env() {
    local path="$1"
    log_info "Saving environment configuration..."
    
    sudo mkdir -p "$(dirname "$ENV_FILE")" || error_exit "Failed to create environment directory"
    echo "AIRLAB_PATH=\"$path\"" | sudo tee "$ENV_FILE" > /dev/null || error_exit "Failed to save environment file"
    
    log_info "Environment configuration saved to $ENV_FILE"
}


setup_bashrc() {
    local env_path="$1"
    local bashrc="$USER_HOME/.bashrc"
    local env_source="set -o allexport; source $env_path/airlab.env; set +o allexport"

    if ! grep -q "source $env_path/airlab.env" "$bashrc"; then
        echo "$env_source" >> "$bashrc" || error_exit "Failed to update .bashrc"
        log_info "Updated .bashrc with environment configuration"
    else
        log_info ".bashrc already configured"
    fi
}

cleanup_local() {
    local path="$1"
    log_info "Cleaning up existing installation..."
    rm -rf "$path" || error_exit "Failed to remove existing directory"
}

setup_local() {
    local airlab_path="$1"
    local force="$2"

    home_dir=$(echo $HOME | sed 's/^HOME=//')
    airlab_path=$(echo "$airlab_path" | sed "s|^~|$home_dir|")
    
    log_info "Setting up local environment at $airlab_path"

    # Check if directory exists and handle overwrite
    if [ -d "$airlab_path" ]; then
        if [ "$force" = true ]; then
            log_warn "Force flag set. Overwriting existing installation..."
            cleanup_local "$airlab_path"
        else
            read -p "Directory $airlab_path already exists. Overwrite? (y/N): " confirm
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                cleanup_local "$airlab_path"
            else
                log_info "Setup cancelled by user"
                exit 0
            fi
        fi
    fi

    # Create fresh installation
    log_info "Creating directory structure..."
    mkdir -p "$airlab_path" || error_exit "Failed to create directory"
    
    # Copy configuration files
    log_info "Copying initial configuration..."
    if [ -d "/etc/airlab" ]; then
        rsync -av --ignore-existing /etc/airlab/ "$airlab_path" || error_exit "Failed to copy initial configuration"
    else
        log_warn "No initial configuration found in /etc/airlab"
        # Create basic structure
        mkdir -p "$airlab_path/robot" || error_exit "Failed to create robot directory"
        touch "$airlab_path/robot/robot.conf" || error_exit "Failed to create robot.conf"
    fi

    # Setup environment
    sed -i '/source .*airlab.env/d' $USER_HOME/.bashrc
    setup_bashrc "$airlab_path"
        cat > $airlab_path/airlab.env << EOF
AIRLAB_PATH=$airlab_path
AIRLAB_SYSTEM=local
EOF

    # Create initial environment file if it doesn't exist
    if [ ! -f "$airlab_path/airlab.env" ]; then
        cat > "$airlab_path/airlab.env" << EOF
AIRLAB_PATH=$airlab_path
AIRLAB_SYSTEM=local
EOF
        log_info "Created initial environment file"
    fi

    log_info "âœ… Local setup completed successfully"
    cat << EOF

Installation details:
  - Path: $airlab_path
  - System: local
  - Environment: $airlab_path/airlab.env
  
Note: Run 'source ~/.bashrc' to apply changes
EOF
    log_info "Please add the ip address used by this system to /etc/hosts"
}

update_robot_info() {
    local robot_info_file="$1"
    local robot_name="$2"
    local field="$3"
    local value="$4"

    ROBOT_INFO_FILE="$robot_info_file/robot/robot_info.yaml"
    
    # Create YAML file if it doesn't exist
    if [ ! -f "$ROBOT_INFO_FILE" ]; then
        echo "robots:" > "$ROBOT_INFO_FILE"
    fi
    
    # Get current timestamp
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Check if robot already exists in YAML
    if grep -q "^  $robot_name:" "$ROBOT_INFO_FILE"; then
        # Check if field exists for this robot
        if grep -q "^    $field:" <(sed -n "/^  $robot_name:/,/^  [^[:space:]]/p" "$ROBOT_INFO_FILE"); then
            # Update existing field
            sed -i "/^  $robot_name:/,/^  [^[:space:]]/ {
                s|^    $field:.*|    $field: \"$value\"|
            }" "$ROBOT_INFO_FILE"
        else
            # Add new field to existing robot
            sed -i "/^  $robot_name:/a\    $field: \"$value\"" "$ROBOT_INFO_FILE"
        fi
        # Always update last_updated timestamp
        sed -i "/^  $robot_name:/,/^  [^[:space:]]/ {
            s|^    last_updated:.*|    last_updated: \"$timestamp\"|
        }" "$ROBOT_INFO_FILE"
    else
        # Add new robot entry with the field
        cat >> "$ROBOT_INFO_FILE" << EOF
  $robot_name:
    $field: "$value"
    last_updated: "$timestamp"
EOF
    fi
    log_info "Updated robot $robot_name $field in $ROBOT_INFO_FILE"
}

# Remote setup helper functions
remote_exec() {
    local host="$1"
    local cmd="$2"
    local password="$3"
    
    sshpass -p "$password" ssh -o StrictHostKeyChecking=no "$host" "$cmd" || error_exit "Failed to execute: $cmd"
}

remote_copy() {
    local src="$1"
    local dest="$2"
    local password="$3"
    
    sshpass -p "$password" scp "$src" "$dest" || error_exit "Failed to copy: $src to $dest"
}

setup_remote() {
    local robot_name="$1"
    local airlab_path="$2"
    local force="$3"
    
    # Validate robot configuration
    source $USER_HOME/.bashrc
    local remote_path=$AIRLAB_PATH
    local robots_conf="$remote_path/robot/robot.conf"
    [[ ! -f "$robots_conf" ]] && error_exit "Robot configuration not found: $robots_conf"

    # Get robot SSH address
    local robot_ssh_address
    robot_ssh_address=$(grep "^$robot_name=" "$robots_conf" | cut -d= -f2)
    [[ -z "$robot_ssh_address" ]] && error_exit "Robot '$robot_name' not found in configuration"

    # Get password securely
    local robot_password
    echo "Enter password for $robot_ssh_address:"
    read -s robot_password
    [[ -z "$robot_password" ]] && error_exit "Password cannot be empty"
    echo

    if ! sshpass -p "$robot_password" ssh -q -o ConnectTimeout=15 "$robot_ssh_address" exit; then
        log_error "Cannot connect to remote system '$robot_ssh_address'"
        exit 1
    fi
    # Check existing installation
    log_info "Checking existing installation..."
    remote_home_dir=$(sshpass -p "$robot_password" ssh -o StrictHostKeyChecking=no "$robot_ssh_address" "echo \$HOME" | sed 's/^HOME=//')
    airlab_path=$(echo "$airlab_path" | sed "s|^~|$remote_home_dir|")

    log_info "Checking for workspace setup at $airlab_path"

    if sshpass -p "$robot_password" ssh -o StrictHostKeyChecking=no "$robot_ssh_address" "[ -d '$airlab_path' ]"; then
        log_warn "Directory exists."
        if [ "$force" = true ]; then
            log_warn "Force flag set. Overwriting existing installation..."
        else
            read -p "Installation exists at $airlab_path. Overwrite? (y/N): " confirm
            [[ ! "$confirm" =~ ^[Yy]$ ]] && error_exit "Setup cancelled"
        fi
        log_warn "Removing existing installation..."
        remote_exec "$robot_ssh_address" "rm -rf $airlab_path" "$robot_password"
    fi

    # Setup remote environment
    log_info "Setting up remote environment..."
    # Create directory structure
    remote_exec "$robot_ssh_address" "mkdir -p $airlab_path" "$robot_password"

    # Copy files
    log_info "Copying configuration files..."
    sshpass -p "$robot_password" rsync -avz --exclude='.git' \
        "$remote_path/" "$robot_ssh_address:$airlab_path/" || error_exit "Failed to copy files"

    # Install package if needed
    if ! sshpass -p "$robot_password" ssh -o StrictHostKeyChecking=no "$robot_ssh_address" "dpkg -l | grep -q '^ii.*airlab'" ; then
        log_info "Installing airlab package..."
        sudo curl -L -o /tmp/airlab.zip https://github.com/kabirkedia/airlab/archive/refs/heads/main.zip
        remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S rm -rf /tmp/airlab-main /tmp/airlab-main.deb /tmp/airlab.zip" "$robot_password"
        remote_copy "/tmp/airlab.zip" "$robot_ssh_address:/tmp/airlab.zip" "$robot_password"
        remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S unzip -o /tmp/airlab.zip -d /tmp/" "$robot_password"
        remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S chmod a+x -R /tmp/airlab-main" "$robot_password"
        remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S apt-get install -f -y" "$robot_password"
        remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S dpkg-deb --build /tmp/airlab-main" "$robot_password"
        remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S dpkg -i /tmp/airlab-main.deb" "$robot_password"
        remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S apt-get install -f -y" "$robot_password"
        remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S rm -rf /tmp/airlab-main /tmp/airlab-main.deb /tmp/airlab.zip" "$robot_password"
    else
        read -p "airlab package is installed. Unpack newer verison? (y/N): " confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            log_warn "Skipping installation"
        else
            log_info "Installing airlab package..."
            sudo curl -L -o /tmp/airlab.zip https://github.com/kabirkedia/airlab/archive/refs/heads/main.zip
            remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S rm -rf /tmp/airlab-main /tmp/airlab-main.deb /tmp/airlab.zip" "$robot_password"
            remote_copy "/tmp/airlab.zip" "$robot_ssh_address:/tmp/airlab.zip" "$robot_password"
            remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S unzip -o /tmp/airlab.zip -d /tmp/" "$robot_password"
            remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S chmod a+x -R /tmp/airlab-main" "$robot_password"
            remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S apt-get install -f -y" "$robot_password"
            remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S dpkg-deb --build /tmp/airlab-main" "$robot_password"
            remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S dpkg -i /tmp/airlab-main.deb" "$robot_password"
            remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S apt-get install -f -y" "$robot_password"
            remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S rm -rf /tmp/airlab-main /tmp/airlab-main.deb /tmp/airlab.zip" "$robot_password"
        fi
    fi

    # Configure environment
    log_info "Configuring environment..."
    cat > /tmp/airlab.env << EOF
AIRLAB_PATH=$airlab_path
AIRLAB_SYSTEM=$robot_name
EOF
    remote_copy "/tmp/airlab.env" "$robot_ssh_address:$airlab_path/airlab.env" "$robot_password"
    rm -f /tmp/airlab.env

    # Update remote .bashrc
    remote_exec "$robot_ssh_address" "sed -i '/source .*airlab.env/d' ~/.bashrc" "$robot_password"
    remote_exec "$robot_ssh_address" "grep -q 'source $airlab_path/airlab.env' ~/.bashrc || \
        echo 'set -o allexport; source $airlab_path/airlab.env; set +o allexport' >> ~/.bashrc" "$robot_password"
    

    cat << EOF
Installation details:
  - Host: $robot_ssh_address
  - Path: $airlab_path
  - System: $robot_name
  
Note: Run 'source ~/.bashrc' on the remote system to apply changes
EOF
    update_robot_info "$remote_path" "$robot_name" "robot_ssh" "$robot_ssh_address"
    update_robot_info "$remote_path" "$robot_name" "ws_path" "$airlab_path"

    log_info "Adding $robot_name to /etc/hosts file locally"
    ip_addr=$(echo $robot_ssh_address | sed 's/.*@//')

    [ -z "$ip_addr" ] && { log_error "Failed to parse IP"; exit 1; }

    if grep -q "$robot_name" /etc/hosts; then
        read -p "$robot_name exists. Overwrite? (y/n): " confirm
        if [[ "$confirm" == [yY] ]]; then
            sudo sed -i "/$robot_name/d" /etc/hosts && \
            sudo sed -i "$ a $ip_addr $robot_name  #$robot_name:$robot_ssh_address" /etc/hosts && \
            log_info "Entry updated" || log_error "Update failed"
        else
            log_info "Keeping existing entry"
        fi
    else
        sudo sed -i "$ a $ip_addr $robot_name  #$robot_name:$robot_ssh_address" /etc/hosts && \
        log_info "Entry added" || log_info "Addition failed"
    fi

    #Sync /etc/hosts
    log_info "Sync /etc/hosts to $robot_name.(This doesn't change local-host)"
    sshpass -p "$robot_password" ssh -o StrictHostKeyChecking=no "$robot_ssh_address" "head -n 9 /etc/hosts" > remote_header.tmp
    sudo tail -n +9 "/etc/hosts" > local_body.tmp
    sudo cat remote_header.tmp local_body.tmp > combined.tmp
    remote_copy "combined.tmp" "$robot_ssh_address:/tmp/hosts" "$robot_password"
    remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S mv /tmp/hosts /etc/hosts" "$robot_password"
    remote_exec "$robot_ssh_address" "echo '$robot_password' | sudo -S rm -rf /tmp/hosts" "$robot_password"
    sudo rm -f remote_header.tmp local_body.tmp combined.tmp
    log_info "Sync completed"
    log_info "âœ… Remote setup completed successfully!"

    log_info "It is recommended to reboot the remote system"
    read -p "Restart the system (y/n)" confirm
    if [[ "$confirm" == [yY] ]]; then
        sshpass -p "$robot_password" ssh -o StrictHostKeyChecking=no "$robot_ssh_address" "echo '$robot_password' | sudo -S reboot" 
    else
        log_info "Skipping"
    fi

}

main() {
    if [[ "$EUID" -ne 0 ]]; then
        echo "This script must be run as root. Please use sudo."
        exit 1
    fi
    [[ $# -lt 1 ]] && { show_usage; error_exit "No command provided"; }

    local command="$1"
    shift

    read -r AIRLAB_PATH FORCE <<< "$(parse_args "$@")"

    case "$command" in
        local)
            setup_local "$AIRLAB_PATH" "$FORCE"
            ;;
        -h|--help)
            show_usage
            ;;
        *)
            setup_remote "$command" "~/airlab_ws" "$FORCE"
            ;;
    esac
}

main "$@"