#!/bin/bash
set -e  # Exit on any error

# Function to handle errors
error_handler() {
    local line_number=$1
    local error_code=$2
    echo "Error occurred in line ${line_number} with exit code ${error_code}"
    exit ${error_code}
}

trap 'error_handler ${LINENO} $?' ERR

# Check if running as root/sudo
if [ "$EUID" -ne 0 ]; then 
    echo "This script must be run as root or with sudo privileges"
    exit 1
fi

ARCH=$(uname -m)
if [ -z "$ARCH" ]; then
    echo "Failed to determine system architecture"
    exit 1
fi

# Docker key check and installation
DOCKER_KEY="/usr/share/keyrings/docker-archive-keyring.gpg"
if [ -f "$DOCKER_KEY" ]; then
    echo "Docker GPG key already exists, skipping..."
else
    echo "Adding Docker's official GPG key..."
    if ! curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o "$DOCKER_KEY"; then
        echo "Failed to add Docker GPG key"
        exit 1
    fi
fi

# Check Docker repository
DOCKER_LIST="/etc/apt/sources.list.d/docker.list"
if [ -f "$DOCKER_LIST" ]; then
    echo "Docker repository already configured, skipping..."
else
    echo "Adding Docker's official repository for architecture $ARCH..."
    if ! echo "deb [arch=$ARCH signed-by=$DOCKER_KEY] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
        sudo tee "$DOCKER_LIST" > /dev/null; then
        echo "Failed to add Docker repository"
        exit 1
    fi
fi

# NVIDIA key check and installation
NVIDIA_KEY="/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg"
if [ -f "$NVIDIA_KEY" ]; then
    echo "NVIDIA GPG key already exists, skipping..."
else
    echo "Adding NVIDIA Container Toolkit GPG key..."
    if ! curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o "$NVIDIA_KEY"; then
        echo "Failed to add NVIDIA GPG key"
        exit 1
    fi
fi

# Check NVIDIA repository
NVIDIA_LIST="/etc/apt/sources.list.d/nvidia-container-toolkit.list"
if [ -f "$NVIDIA_LIST" ]; then
    echo "NVIDIA repository already configured, skipping..."
else
    echo "Adding NVIDIA Container Toolkit repository..."
    if ! curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
        sed 's#deb https://#deb [signed-by='$NVIDIA_KEY'] https://#g' | \
        sudo tee "$NVIDIA_LIST"; then
        echo "Failed to add NVIDIA repository"
        exit 1
    fi
fi

# Check for pip3
echo "Checking for pip3..."
if ! command -v pip3 &> /dev/null; then
    echo "pip3 is not installed. Attempting to install..."
    if ! sudo apt-get update && sudo apt-get install -y python3-pip; then
        echo "Failed to install pip3"
        exit 1
    fi
fi

# Verify pip3 is executable
PIP_PATH=$(which pip3)
if [ ! -x "$PIP_PATH" ]; then
    echo "pip3 is not executable. Please check permissions."
    exit 1
fi

# Install PIP packages with error checking
PIP_PACKAGES="pyyaml"
echo "Installing PIP packages..."
for pkg in $PIP_PACKAGES; do
    if ! pip3 show "$pkg" &>/dev/null; then
        echo "Installing $pkg..."
        if ! pip3 install "$pkg"; then
            echo "Failed to install $pkg"
            exit 1
        fi
    else
        echo "$pkg is already installed."
    fi
done

## For docker-compose 
#Install Docker Compose
DOCKER_COMPOSE_VERSION="2.32.1"  # Replace with your desired version or fetch dynamically

CLI_PLUGIN_PATHS=(
    "/usr/local/lib/docker/cli-plugins"
    "/usr/local/libexec/docker/cli-plugins"
    "/usr/lib/docker/cli-plugins"
    "/usr/libexec/docker/cli-plugins"
)

# Determine the correct CLI plugins directory
CLI_PLUGIN_DIR=""
for path in "${CLI_PLUGIN_PATHS[@]}"; do
    if [ -d "$path" ]; then
        CLI_PLUGIN_DIR="$path" && break
    fi
done

if [ -z "$CLI_PLUGIN_DIR" ]; then
    echo "No valid CLI plugins directory found."
    exit 1
fi
echo "Using CLI plugins directory: $CLI_PLUGIN_DIR"
DOCKER_COMPOSE_PLUGIN="$CLI_PLUGIN_DIR/docker-compose"
if [ -f "$DOCKER_COMPOSE_PLUGIN" ]; then
    INSTALLED_VERSION=$("$DOCKER_COMPOSE_PLUGIN" version | awk '{print $4}' | tr -d ',')
    echo "Installed Version: $INSTALLED_VERSION"
    if [ "$INSTALLED_VERSION" > /dev/null ]; then
        echo "Docker Compose CLI plugin version $INSTALLED_VERSION is already installed."
        echo "Installation completed successfully"
        exit 0
    fi
    echo "Updating Docker Compose CLI plugin to version $DOCKER_COMPOSE_VERSION..."
else
    echo "Installing Docker Compose CLI plugin version $DOCKER_COMPOSE_VERSION..."
fi

# Download and install/update Docker Compose CLI plugin
sudo wget "https://github.com/docker/compose/releases/download/v$DOCKER_COMPOSE_VERSION/docker-compose-linux-$(uname -m)" -P "$CLI_PLUGIN_DIR/"
sudo mv $CLI_PLUGIN_DIR/docker-compose-linux-$(uname -m) $CLI_PLUGIN_DIR/docker-compose
sudo chmod +x "$DOCKER_COMPOSE_PLUGIN" && \
echo "Docker Compose CLI plugin installed/updated successfully at $DOCKER_COMPOSE_PLUGIN." || \
{ echo "Failed to install/update Docker Compose CLI plugin."; exit 1;}
echo "Installation completed successfully"
